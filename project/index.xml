<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Kulin Shah</title>
    <link>https://kulinshah98.github.io/project/</link>
    <description>Recent content in Projects on Kulin Shah</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Mon, 27 Feb 2017 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://kulinshah98.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concurrent Voting Mechanism</title>
      <link>https://kulinshah98.github.io/project/concurrent-voting-mechanism/</link>
      <pubDate>Mon, 27 Feb 2017 00:00:00 +0530</pubDate>
      
      <guid>https://kulinshah98.github.io/project/concurrent-voting-mechanism/</guid>
      <description>A concurrent process of voting where the threads representing evms, voters and booths run concurrently using conditional variables and mutex locks.
Implementation Details  Creating thread for each EVM and each voter. Voter thread will call voter function which will wait until he will allocate a EVM to vote. EVM thread will call EVM function. EVM function will generate a random number between 1 to max. capacity of that booth and allocate that many voter to that EVM.</description>
    </item>
    
    <item>
      <title>AI Bot for ultimate tic-tac-toe</title>
      <link>https://kulinshah98.github.io/project/ai-bot-for-ultimate-tic-tac-toe/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0530</pubDate>
      
      <guid>https://kulinshah98.github.io/project/ai-bot-for-ultimate-tic-tac-toe/</guid>
      <description> An AI agent implemented using Monte Carlo Tree Search (MCTS) using Upper Confidence Bounds (UCT).
Game Description  Basic game is - https://mathwithbaddrawings.com/ultimate-tic-tac-toe-original-post/
 But instead of 3*3, it is 4*4  Resources for MCTS and UCT  https://en.wikipedia.org/wiki/Monte_Carlo_tree_search https://jeffbradberry.com/posts/2015/09/intro-to-monte-carlo-tree-search/ http://www.cameronius.com/research/mcts/about/index.html  Test  Tested our agent with several search algorithms and other algorithms Our algorithm outperformed all other algorithms  Scope of improvement  Backpropogation step of MCTS properly to store heuristic Implementation in C++ instead of Python for more number of simulations Evaluation function  </description>
    </item>
    
    <item>
      <title>Consistent Bellman Operator</title>
      <link>https://kulinshah98.github.io/project/consistent-bellman-operator/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0530</pubDate>
      
      <guid>https://kulinshah98.github.io/project/consistent-bellman-operator/</guid>
      <description>Pytorch implementation of new reinfrocement learning operators proposed in Increasing the Action Gap: New Operators for Reinforcement Learning . This paper introduces new optimality-preserving operators on Q-functions. This project includes the source code for training, demo and action gap visualization, and trained models with 3 learning operators for 5 Atari games.
Results  Persistent Advantage Learning operator on 5 games : Phoenix, Pong, Breakout, SpaceInvaders and Asterix Saved model can be downloaded from here  Environment Details  python 3.</description>
    </item>
    
    <item>
      <title>Go Back N Protocol</title>
      <link>https://kulinshah98.github.io/project/go-back-n-protocol/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0530</pubDate>
      
      <guid>https://kulinshah98.github.io/project/go-back-n-protocol/</guid>
      <description>  Go-Back N protocol is error detection and error correction algorithm in the communtication between sender and receiver through socket.  Implementation Details  Created sender and receiver program which can communicate with each other. Go-Back N protocol will detect and correct error in communication between sender and receiver.  Test  To test Go-Back-N protocol, at the receiver side, I randomly skipped some packets.  </description>
    </item>
    
    <item>
      <title>Pricing mechanism design</title>
      <link>https://kulinshah98.github.io/project/pricing-mechanism/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0530</pubDate>
      
      <guid>https://kulinshah98.github.io/project/pricing-mechanism/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.</description>
    </item>
    
    <item>
      <title>Relative Attributes</title>
      <link>https://kulinshah98.github.io/project/relative-attributes/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0530</pubDate>
      
      <guid>https://kulinshah98.github.io/project/relative-attributes/</guid>
      <description>Python Implementation of Visual Relative Attributes for Image Classification and Zero Shot Learning
Description This implementation refers to paper Relative Attributes, D. Parikh and K. Grauman, International Conference on Computer Vision (ICCV), 2011. Original code given by authors was in matlab. This repo contains python code for learning relative ranking function using Newton optimization implemented from scratch. Also Zero Shot Learning with Gaussian Mixture Model is implemented in python.</description>
    </item>
    
    <item>
      <title>Universal Style Transfer</title>
      <link>https://kulinshah98.github.io/project/universal-style-transfer/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0530</pubDate>
      
      <guid>https://kulinshah98.github.io/project/universal-style-transfer/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>